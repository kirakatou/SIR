   /*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.sumames.sir.ui.purchase;

import com.sumames.sir.Main;
import com.sumames.sir.entity.PurchaseRequest;
import com.sumames.sir.entity.PurchaseRequestDetail;
import com.sumames.sir.entity.Employer;
import com.sumames.sir.entity.PurchaseOrder;
import com.sumames.sir.entity.PurchaseOrderDetail;
import com.sumames.sir.helper.AppUtil;
import com.sumames.sir.helper.AutoCompletion;
import com.sumames.sir.helper.Support;
import com.sumames.sir.ui.renderer.DoubleCellRenderer;
import com.sumames.sir.ui.renderer.TableCellListener;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import javax.swing.AbstractAction;
import javax.swing.Action;
import javax.swing.JComponent;
import javax.swing.JOptionPane;
import javax.swing.KeyStroke;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumnModel;

/**
 *
 * @author My pc
 */
public class PurchaseOrderData extends javax.swing.JPanel {

    private String option;
    private int recordId;
    private int prRecordId;
    private Action action;
    private HashMap<String, Integer> mapAccess;
    private PurchaseRequest purchaserequest;
    private Employer employe;
    private HashMap<String, Integer> requestno;
    private HashMap<String, Integer> employerID;
    private PurchaseOrder purchaseorder;

    /**
     * Creates new form Purchase Request Input
     */
    public PurchaseOrderData(String option, int recordId) {
        this.option = option;
        this.recordId = recordId;
        initComponents();
        loadingData();
        count();
       
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btSave = new javax.swing.JButton();
        tfNo = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tbPurchaseOrder = new javax.swing.JTable();
        btDelete = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        taDescription = new javax.swing.JTextArea();
        date = new com.toedter.calendar.JDateChooser();
        jLabel2 = new javax.swing.JLabel();
        requestno = new HashMap();
        employerID = new HashMap();
        cbrequestno = new javax.swing.JComboBox<>();
        jLabel7 = new javax.swing.JLabel();
        tfTotal = new javax.swing.JTextField();

        setFont(new java.awt.Font("Noto Serif", 0, 14)); // NOI18N
        setOpaque(false);
        setPreferredSize(new java.awt.Dimension(844, 417));

        btSave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/sumames/sir/resources/image/buttons/6-01.png"))); // NOI18N
        btSave.setBorderPainted(false);
        btSave.setContentAreaFilled(false);
        btSave.setPreferredSize(new java.awt.Dimension(65, 23));
        btSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btSaveActionPerformed(evt);
            }
        });

        tfNo.setFont(getFont());
        tfNo.setPreferredSize(new java.awt.Dimension(100, 30));

        jLabel6.setFont(getFont());
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("No :");

        jLabel4.setFont(getFont());
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Description :");

        jLabel1.setFont(getFont());
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Date :");

        tbPurchaseOrder.setFont(getFont());
        tbPurchaseOrder.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Record Id", "Description", "Price", "Qty", "Subtotal"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Double.class, java.lang.Integer.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true, true, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        KeyStroke keyStroke = KeyStroke.getKeyStroke(KeyEvent.VK_DELETE, 0);
        tbPurchaseOrder.getActionMap().put("save", saveAction());
        tbPurchaseOrder.getInputMap(JComponent.WHEN_FOCUSED).put(keyStroke, "save");

        action  = new AbstractAction() {
            public void actionPerformed(ActionEvent e) {
                abstractActionPerformed(e);
            }
        };
        TableCellListener tcl = new TableCellListener(tbPurchaseOrder, action);
        tbPurchaseOrder.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tbPurchaseOrderKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tbPurchaseOrderKeyReleased(evt);
            }
        });
        jScrollPane2.setViewportView(tbPurchaseOrder);
        if (tbPurchaseOrder.getColumnModel().getColumnCount() > 0) {
            tbPurchaseOrder.getColumnModel().getColumn(0).setMinWidth(0);
            tbPurchaseOrder.getColumnModel().getColumn(0).setMaxWidth(0);
        }

        btDelete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/sumames/sir/resources/image/buttons/4-01.png"))); // NOI18N
        btDelete.setBorder(null);
        btDelete.setContentAreaFilled(false);

        taDescription.setColumns(20);
        taDescription.setRows(5);
        jScrollPane1.setViewportView(taDescription);

        date.setOpaque(false);
        date.setPreferredSize(new java.awt.Dimension(100, 30));

        jLabel2.setFont(getFont());
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Request No");

        cbrequestno.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cbrequestno.setPreferredSize(new java.awt.Dimension(100, 30));
        cbrequestno.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbrequestnoItemStateChanged(evt);
            }
        });
        cbrequestno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbrequestnoActionPerformed(evt);
            }
        });

        jLabel7.setFont(getFont());
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("Total :");

        tfTotal.setEditable(false);
        tfTotal.setFont(getFont());
        tfTotal.setEnabled(false);
        tfTotal.setPreferredSize(new java.awt.Dimension(100, 30));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING))
                                .addGap(10, 10, 10)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(tfNo, javax.swing.GroupLayout.DEFAULT_SIZE, 174, Short.MAX_VALUE)
                                    .addComponent(date, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(cbrequestno, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 263, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(tfTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(353, 353, 353)
                        .addComponent(btSave, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btDelete)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(5, 5, 5)
                                .addComponent(jLabel7))
                            .addComponent(tfTotal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(tfNo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(date, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(jLabel1)
                                        .addGap(10, 10, 10))))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(5, 5, 5)
                                .addComponent(jLabel6)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cbrequestno, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2)))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(btSave, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 284, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btSaveActionPerformed
        saveData();
    }//GEN-LAST:event_btSaveActionPerformed

    private void tbPurchaseOrderKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tbPurchaseOrderKeyPressed
        if (evt.getID() == KeyEvent.KEY_PRESSED) {
            if (evt.getKeyCode() == KeyEvent.VK_DOWN) {
                if (tbPurchaseOrder.getSelectedRow() == tbPurchaseOrder.getRowCount() - 1) {
                    addRow();
                }
            }
        }
    }//GEN-LAST:event_tbPurchaseOrderKeyPressed

    private void cbrequestnoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbrequestnoActionPerformed
        if(requestno.get(cbrequestno.getSelectedItem()) == null ){
            this.prRecordId = 0;
        }
        else
        this.prRecordId = requestno.get(cbrequestno.getSelectedItem());
        refreshTable();
        count();
        cellrenderer();
    }//GEN-LAST:event_cbrequestnoActionPerformed

    private void cbrequestnoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbrequestnoItemStateChanged
        refreshTable();
    }//GEN-LAST:event_cbrequestnoItemStateChanged

    private void tbPurchaseOrderKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tbPurchaseOrderKeyReleased

    }//GEN-LAST:event_tbPurchaseOrderKeyReleased


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btDelete;
    private javax.swing.JButton btSave;
    private javax.swing.JComboBox<String> cbrequestno;
    private com.toedter.calendar.JDateChooser date;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea taDescription;
    private javax.swing.JTable tbPurchaseOrder;
    private javax.swing.JTextField tfNo;
    private javax.swing.JTextField tfTotal;
    // End of variables declaration//GEN-END:variables
   private void nullifyTableValue(){
       for (int i = 0; i < tbPurchaseOrder.getRowCount(); i++){
        tbPurchaseOrder.setValueAt("0", i, 2);
        tbPurchaseOrder.setValueAt("0", i, 4);
           
       }
   }
    
    
    private void saveData() {

        if (option.equals("NEW")) {
            formToObject();
            purchaseorder.setCreateDatetime(new Date());
            purchaseorder.setCreateByUserRecordId(Main.getFrame().getLogin().getEmployeeRecordId());
            if (AppUtil.getService().save(purchaseorder)) {
                for (int i = 0; i < tbPurchaseOrder.getRowCount(); i++) {
                    PurchaseOrderDetail orderdetail = new PurchaseOrderDetail();
                    orderdetail.setPurchaseOrderRecordId(purchaseorder.getRecordId());
                    System.out.println(tbPurchaseOrder.getValueAt(i, 2).toString());
                   

                    orderdetail.setDescription(tbPurchaseOrder.getValueAt(i, 1).toString());
                    orderdetail.setPrice(Double.parseDouble(tbPurchaseOrder.getValueAt(i, 2).toString()));
                    orderdetail.setQty(Double.parseDouble(tbPurchaseOrder.getValueAt(i, 3).toString()));
                    orderdetail.setSubtotal(Double.parseDouble(tbPurchaseOrder.getValueAt(i, 4).toString()));
                    orderdetail.setCreateDatetime(new Date());
                    orderdetail.setCreateByUserRecordId(Main.getFrame().getLogin().getEmployeeRecordId());
                    AppUtil.getService().save(orderdetail);
                }
                msg("Save Done!");
                Main.getFrame().getTab().removeTabAt(Main.getFrame().getTab().getSelectedIndex());

            } else {
                msg("Save Failed!");
            }

        } else if (option.equals("EDIT")) {
            formToObject();
            System.out.println(recordId);
            purchaseorder.setRecordId(recordId);
            if (AppUtil.getService().save(purchaseorder)) {
                for (int i = 0; i < tbPurchaseOrder.getRowCount(); i++) {
                    PurchaseOrderDetail orderdetail = new PurchaseOrderDetail();
                    if (tbPurchaseOrder.getValueAt(i, 0) != null) {
                        orderdetail.setPurchaseOrderRecordId((Integer) tbPurchaseOrder.getValueAt(i, 0));
                    }
                   orderdetail.setRecordId(Integer.parseInt(tbPurchaseOrder.getValueAt(i, 0).toString()));
                    orderdetail.setDescription(tbPurchaseOrder.getValueAt(i, 1).toString());
                    orderdetail.setPrice(Double.parseDouble(tbPurchaseOrder.getValueAt(i, 2).toString()));
                    orderdetail.setQty(Double.parseDouble(tbPurchaseOrder.getValueAt(i, 3).toString()));
                    orderdetail.setSubtotal(Double.parseDouble(tbPurchaseOrder.getValueAt(i, 4).toString()));
                    orderdetail.setCreateDatetime(new Date());
                    orderdetail.setCreateByUserRecordId(Main.getFrame().getLogin().getEmployeeRecordId());
                    AppUtil.getService().save(orderdetail);
                }
                msg("Save Done!");
                Main.getFrame().getTab().removeTabAt(Main.getFrame().getTab().getSelectedIndex());
            } else {
                msg("Save Failed!");
            }
        }
    }

    public void formToObject() {
        if (purchaseorder == null) {
            purchaseorder = new PurchaseOrder();
        }
        purchaseorder.setNo(tfNo.getText());
        purchaseorder.setDate(date.getDate());
        purchaseorder.setRequestRecordId(requestno.get(cbrequestno.getSelectedItem()));
        purchaseorder.setNote(taDescription.getText());
//        orderdetail.setPurchaseOrderRecordId(Integer.parseInt(cbrequestno.getSelectedItem().toString()));
        purchaseorder.setTotal(Double.parseDouble(tfTotal.getText()));
        purchaseorder.setNote(taDescription.getText());
    }

    public void objectToForm() {
        if (purchaseorder != null) {
            tfNo.setText(purchaseorder.getNo());
            date.setDate(purchaseorder.getDate());
            cbrequestno.setSelectedItem(Support.getKeyFromValue(requestno, purchaseorder.getRequestRecordId()));
            tfTotal.setText(purchaseorder.getTotal().toString());
            taDescription.setText(purchaseorder.getNote());

        }
    }
    
    

    private void abstractActionPerformed(java.awt.event.ActionEvent evt) {
        TableCellListener tcl = (TableCellListener) evt.getSource();
        int row = tbPurchaseOrder.getSelectedRow();
        if (tbPurchaseOrder.getSelectedRow() >= 0) {
            switch (tcl.getColumn()) {
                case 2: {
                    double a;
                    if (tbPurchaseOrder.getModel().getValueAt(row, 3) == null) {
                        a = 0.00;
                    } else {
                        a = Double.parseDouble(tbPurchaseOrder.getModel().getValueAt(row, 3).toString());
                    }
                    Double b = (Double) tcl.getNewValue();
                    Double subtotal = a * b;
                    tbPurchaseOrder.setValueAt(subtotal, row, 4);
                    count();
                    break;
                }
                case 3: {
                    double a;
                    if (tbPurchaseOrder.getModel().getValueAt(row, 2) == null) {
                        a = 0.00;
                    } else {
                        a = Double.parseDouble(String.valueOf(tbPurchaseOrder.getModel().getValueAt(row, 2)));
                    }
                    int b = Integer.parseInt(tcl.getNewValue().toString());
                    double subtotal = a * b;
                    tbPurchaseOrder.setValueAt(subtotal, row, 4);
                    count();
                    break;
                }
                default:
                    break;
            }

        }
    }

    private AbstractAction saveAction() {
        AbstractAction save = new AbstractAction() {

            @Override
            public void actionPerformed(ActionEvent e) {
//                JOptionPane.showMessageDialog(RentData.this.tbRent, "Action Triggered.");
                tbPurchaseOrder.editingCanceled(null);
                tbPurchaseOrder.editingStopped(null);
                int selectedRow = tbPurchaseOrder.getSelectedRow();
                if (selectedRow != -1) {
                    ((DefaultTableModel) tbPurchaseOrder.getModel()).removeRow(selectedRow);
                    tbPurchaseOrder.scrollRectToVisible(tbPurchaseOrder.getCellRect(tbPurchaseOrder.getRowCount() - 1, 0, true));
                }
            }
        };
        return save;
    }

    private void addRow() {
        DefaultTableModel model = (DefaultTableModel) tbPurchaseOrder.getModel();
        if (model != null) {
            model.addRow(new Object[]{});
        }

    }

    public void refreshTable() {
        List<PurchaseRequestDetail> list = AppUtil.getService().getListRequestDetailById(prRecordId);
        DefaultTableModel dtm = (DefaultTableModel) tbPurchaseOrder.getModel();
        dtm.setRowCount(0);
        for (PurchaseRequestDetail rd : list) {
            dtm.addRow(new Object[]{rd.getRecordId(), rd.getDescription(), rd.getEstPrice(), rd.getQty(), rd.getSubtotal()});
        }
    }
    
    public void refreshTable2(){
        List<PurchaseOrderDetail> list = AppUtil.getService().getListOrderDetailById(recordId);
        DefaultTableModel tm = (DefaultTableModel) tbPurchaseOrder.getModel();
        tm.setRowCount(0);
        for (PurchaseOrderDetail od : list){
            tm.addRow(new Object[]{od.getRecordId(),od.getDescription(), od.getPrice(),od.getQty(),od.getSubtotal()});
        }
    }

    public void count() {
        if (tbPurchaseOrder.getRowCount() > 0) {
            Double subtotal = 0.00;

            for (int i = 0; i <= tbPurchaseOrder.getRowCount() - 1; i++) {
                System.out.println("Value = " + tbPurchaseOrder.getModel().getValueAt(i, 4));
                subtotal = subtotal + Double.parseDouble(tbPurchaseOrder.getModel().getValueAt(i, 4).toString());
                System.out.println("Subtotal" + subtotal);
            }
            tfTotal.setText(subtotal.toString());
        }
    }

    public void loadingData() {
        cbrequestno.removeAllItems();
        AutoCompletion.enable(cbrequestno);
        addRow();
        
        List<PurchaseRequest> requestlist = AppUtil.getService().getRequestAgreed();
        for (PurchaseRequest request : requestlist) {
            requestno.put(request.getNo(), request.getRecordId());
            cbrequestno.addItem(request.getNo());
        }
        List<Employer> employerlist = AppUtil.getService().getEmployersNotDeleted();
        for (Employer employe : employerlist) {
            employerID.put(employe.getName(), employe.getRecordId());

        }
        if (option.equals("NEW")) {
            tfNo.setText(Support.AutoNumber(AppUtil.getService().getPurchaseOrderLast(), "PO", Boolean.TRUE));
            tfTotal.setText("0");
            taDescription.setText("");
            date.setDate(new Date());
        } else if (option.equals("EDIT")) {
            purchaseorder = AppUtil.getService().getPurchaseOrderById(recordId);
            objectToForm();
            cbrequestnoActionPerformed(null);
            cbrequestnoItemStateChanged(null);
            cbrequestno.setEditable(false);
            cbrequestno.setEnabled(false);
            refreshTable2();
            
        }
    }
 public void cellrenderer(){
        TableColumnModel m = tbPurchaseOrder.getColumnModel();
        DoubleCellRenderer dcr = new DoubleCellRenderer();
        m.getColumn(2).setCellRenderer(dcr);
          m.getColumn(4).setCellRenderer(dcr);
    }
    private void msg(String msg) {
        JOptionPane.showMessageDialog(null, msg);
    }
}
