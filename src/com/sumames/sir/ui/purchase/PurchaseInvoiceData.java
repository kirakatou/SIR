/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.sumames.sir.ui.purchase;

import com.sumames.sir.Main;
import com.sumames.sir.entity.PurchaseRequest;
import com.sumames.sir.entity.PurchaseRequestDetail;
import com.sumames.sir.entity.Employer;
import com.sumames.sir.entity.Journal;
import com.sumames.sir.entity.JournalDetail;

import com.sumames.sir.entity.PurchaseInvoice;
import com.sumames.sir.entity.PurchaseInvoiceDetail;
import com.sumames.sir.entity.PurchaseOrder;
import com.sumames.sir.entity.PurchaseOrderDetail;
import com.sumames.sir.helper.AppUtil;
import com.sumames.sir.helper.AutoCompletion;
import com.sumames.sir.helper.Support;
import com.sumames.sir.helper.TextComponentUtils;
import com.sumames.sir.ui.renderer.DoubleCellRenderer;
import com.sumames.sir.ui.renderer.TableCellListener;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import javax.swing.AbstractAction;
import javax.swing.Action;
import javax.swing.JComponent;
import javax.swing.JFormattedTextField;
import javax.swing.JOptionPane;
import javax.swing.KeyStroke;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumnModel;
import javax.swing.text.NumberFormatter;

/**
 *
 * @author My pc
 */
public class PurchaseInvoiceData extends javax.swing.JPanel {

    private String option;
    private int recordId;
    private int orRecordId;
    private Action action;
    private HashMap<String, Integer> mapAccess;
    private PurchaseRequest purchaserequest;
    private Employer employe;
    private HashMap<String, Integer> orderno;
    private HashMap<String, Integer> employerID;
    private PurchaseRequestDetail requestdetail;
    private PurchaseInvoice purchaseInvoice;
    private PurchaseInvoiceDetail invoicedetail;

    /**
     * Creates new form Purchase Request Input
     */
    public PurchaseInvoiceData(String option, int recordId) {
        this.option = option;
        this.recordId = recordId;
        initComponents();
        loadingData();
        count();
        counttax();
        nullifyTableValue();
        cellrenderer();
        

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btSave = new javax.swing.JButton();
        tfNo = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tbPurchaseInvoice = new javax.swing.JTable();
        btDelete = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        taDescription = new javax.swing.JTextArea();
        dtDate = new com.toedter.calendar.JDateChooser();
        jLabel2 = new javax.swing.JLabel();
        orderno = new HashMap();
        employerID = new HashMap();
        cbOrderNo = new javax.swing.JComboBox<>();
        jLabel7 = new javax.swing.JLabel();
        tfSubTotal = new javax.swing.JTextField();
        tfSupplierName = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        tfTotal = new javax.swing.JTextField();
        tfDiscountValue = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        NumberFormatter nf = new NumberFormatter();
        nf.setValueClass(Integer.class);
        nf.setMinimum(new Integer(0));
        nf.setMaximum(new Integer(100));
        tfTaxPercent = new JFormattedTextField(nf);
        tfTaxValue = new javax.swing.JTextField();
        tfDiscPercent = new javax.swing.JTextField();
        chCash = new javax.swing.JCheckBox();

        setFont(new java.awt.Font("Noto Serif", 0, 14)); // NOI18N
        setOpaque(false);
        setPreferredSize(new java.awt.Dimension(844, 417));

        btSave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/sumames/sir/resources/image/buttons/6-01.png"))); // NOI18N
        btSave.setBorderPainted(false);
        btSave.setContentAreaFilled(false);
        btSave.setPreferredSize(new java.awt.Dimension(65, 23));
        btSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btSaveActionPerformed(evt);
            }
        });

        tfNo.setFont(getFont());
        tfNo.setPreferredSize(new java.awt.Dimension(100, 30));

        jLabel6.setFont(getFont());
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("No :");

        jLabel4.setFont(getFont());
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Description :");

        jLabel1.setFont(getFont());
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Date :");

        tbPurchaseInvoice.setFont(getFont());
        tbPurchaseInvoice.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Record Id", "Description", "Price", "Qty", "Subtotal"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Double.class, java.lang.Integer.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true, true, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        KeyStroke keyStroke = KeyStroke.getKeyStroke(KeyEvent.VK_DELETE, 0);
        tbPurchaseInvoice.getActionMap().put("save", saveAction());
        tbPurchaseInvoice.getInputMap(JComponent.WHEN_FOCUSED).put(keyStroke, "save");

        action  = new AbstractAction() {
            public void actionPerformed(ActionEvent e) {
                abstractActionPerformed(e);
            }
        };
        TableCellListener tcl = new TableCellListener(tbPurchaseInvoice, action);
        tbPurchaseInvoice.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tbPurchaseInvoiceKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tbPurchaseInvoiceKeyReleased(evt);
            }
        });
        jScrollPane2.setViewportView(tbPurchaseInvoice);
        if (tbPurchaseInvoice.getColumnModel().getColumnCount() > 0) {
            tbPurchaseInvoice.getColumnModel().getColumn(0).setMinWidth(0);
            tbPurchaseInvoice.getColumnModel().getColumn(0).setMaxWidth(0);
        }

        btDelete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/sumames/sir/resources/image/buttons/4-01.png"))); // NOI18N
        btDelete.setBorder(null);
        btDelete.setContentAreaFilled(false);

        taDescription.setColumns(20);
        taDescription.setRows(5);
        jScrollPane1.setViewportView(taDescription);

        dtDate.setOpaque(false);
        dtDate.setPreferredSize(new java.awt.Dimension(100, 30));

        jLabel2.setFont(getFont());
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Order No");

        cbOrderNo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cbOrderNo.setPreferredSize(new java.awt.Dimension(100, 30));
        cbOrderNo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbOrderNoItemStateChanged(evt);
            }
        });
        cbOrderNo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbOrderNoActionPerformed(evt);
            }
        });

        jLabel7.setFont(getFont());
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("SubTotal :");

        tfSubTotal.setEditable(false);
        tfSubTotal.setFont(getFont());
        tfSubTotal.setEnabled(false);
        tfSubTotal.setPreferredSize(new java.awt.Dimension(100, 30));

        tfSupplierName.setFont(getFont());
        tfSupplierName.setPreferredSize(new java.awt.Dimension(100, 30));

        jLabel8.setFont(getFont());
        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setText("Supplier Name");

        jLabel9.setFont(getFont());
        jLabel9.setForeground(new java.awt.Color(255, 255, 255));
        jLabel9.setText("Total :");

        tfTotal.setEditable(false);
        tfTotal.setFont(getFont());
        tfTotal.setEnabled(false);
        tfTotal.setPreferredSize(new java.awt.Dimension(100, 30));

        tfDiscountValue.setFont(getFont());
        tfDiscountValue.setPreferredSize(new java.awt.Dimension(100, 30));
        TextComponentUtils.setNumericTextOnly(tfDiscountValue);

        jLabel10.setFont(getFont());
        jLabel10.setForeground(new java.awt.Color(255, 255, 255));
        jLabel10.setText("Disc (%) :");

        jLabel11.setFont(getFont());
        jLabel11.setForeground(new java.awt.Color(255, 255, 255));
        jLabel11.setText("Tax (%) :");

        tfTaxPercent.setFont(getFont());
        tfTaxPercent.setPreferredSize(new java.awt.Dimension(100, 30));
        tfTaxPercent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfTaxPercentActionPerformed(evt);
            }
        });
        tfTaxPercent.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tfTaxPercentKeyReleased(evt);
            }
        });
        TextComponentUtils.setNumericTextOnly(tfTaxPercent);

        tfTaxValue.setFont(getFont());
        tfTaxValue.setPreferredSize(new java.awt.Dimension(100, 30));
        TextComponentUtils.setNumericTextOnly(tfTaxValue);

        tfDiscPercent.setFont(getFont());
        tfDiscPercent.setPreferredSize(new java.awt.Dimension(100, 30));
        TextComponentUtils.setNumericTextOnly(tfDiscPercent);
        tfDiscPercent.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tfDiscPercentKeyReleased(evt);
            }
        });

        chCash.setForeground(new java.awt.Color(255, 255, 255));
        chCash.setText("CASH");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel8)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(cbOrderNo, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(tfSupplierName, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(30, 30, 30)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel10)
                            .addComponent(jLabel11)
                            .addComponent(jLabel9))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(tfDiscPercent, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(tfDiscountValue, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(tfTaxPercent, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(tfTaxValue, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(tfSubTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(tfTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(chCash)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane2)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(54, 54, 54)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(tfNo, javax.swing.GroupLayout.DEFAULT_SIZE, 174, Short.MAX_VALUE)
                            .addComponent(dtDate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(24, 24, 24)
                        .addComponent(jLabel7)
                        .addGap(201, 201, 201)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 215, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(btSave, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btDelete)))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {cbOrderNo, dtDate, tfNo, tfSubTotal, tfSupplierName, tfTotal});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(btSave, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(tfNo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(5, 5, 5)
                                        .addComponent(jLabel6)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                                    .addComponent(jLabel1)
                                    .addComponent(dtDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                                    .addComponent(jLabel8)
                                    .addComponent(tfSupplierName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(5, 5, 5)
                                        .addComponent(jLabel7))
                                    .addComponent(tfSubTotal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(tfTaxPercent, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel11))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(tfDiscPercent, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(tfDiscountValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel10)))
                                    .addComponent(tfTaxValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cbOrderNo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2)
                            .addComponent(jLabel9)
                            .addComponent(tfTotal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(chCash)))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 256, Short.MAX_VALUE)
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {cbOrderNo, dtDate, tfNo, tfSubTotal, tfSupplierName, tfTotal});

    }// </editor-fold>//GEN-END:initComponents


    private void btSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btSaveActionPerformed
        saveData();
    }//GEN-LAST:event_btSaveActionPerformed

    private void tbPurchaseInvoiceKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tbPurchaseInvoiceKeyPressed
        if (evt.getID() == KeyEvent.KEY_PRESSED) {
            if (evt.getKeyCode() == KeyEvent.VK_DOWN) {
                if (tbPurchaseInvoice.getSelectedRow() == tbPurchaseInvoice.getRowCount() - 1) {
                    addRow();
                }
            }
        }
    }//GEN-LAST:event_tbPurchaseInvoiceKeyPressed

    private void cbOrderNoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbOrderNoActionPerformed
        if (orderno.get(cbOrderNo.getSelectedItem()) == null) {
            this.orRecordId = 0;
        } else {
            this.orRecordId = orderno.get(cbOrderNo.getSelectedItem());
        }
        refreshTable();
        count();
      
    }//GEN-LAST:event_cbOrderNoActionPerformed

    private void cbOrderNoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbOrderNoItemStateChanged
        refreshTable();
    }//GEN-LAST:event_cbOrderNoItemStateChanged
    
    private void tfTaxPercentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfTaxPercentActionPerformed
        
    }//GEN-LAST:event_tfTaxPercentActionPerformed

    private void tfTaxPercentKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tfTaxPercentKeyReleased
        if(tfSubTotal != null){
            double tax =Double.parseDouble(tfSubTotal.getText()) * (Double.parseDouble(tfTaxPercent.getText())/100);
            tfTaxValue.setText(Double.toString(tax));
            counttax();
        }
    }//GEN-LAST:event_tfTaxPercentKeyReleased

    private void tfDiscPercentKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tfDiscPercentKeyReleased
        if(tfSubTotal != null){
            double disc =Double.parseDouble(tfSubTotal.getText()) * (Double.parseDouble(tfDiscPercent.getText())/100);
            tfDiscountValue.setText(Double.toString(disc));
            counttax();
        }
    }//GEN-LAST:event_tfDiscPercentKeyReleased

    private void tbPurchaseInvoiceKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tbPurchaseInvoiceKeyReleased

    }//GEN-LAST:event_tbPurchaseInvoiceKeyReleased


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btDelete;
    private javax.swing.JButton btSave;
    private javax.swing.JComboBox<String> cbOrderNo;
    private javax.swing.JCheckBox chCash;
    private com.toedter.calendar.JDateChooser dtDate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea taDescription;
    private javax.swing.JTable tbPurchaseInvoice;
    private javax.swing.JTextField tfDiscPercent;
    private javax.swing.JTextField tfDiscountValue;
    private javax.swing.JTextField tfNo;
    private javax.swing.JTextField tfSubTotal;
    private javax.swing.JTextField tfSupplierName;
    private javax.swing.JTextField tfTaxPercent;
    private javax.swing.JTextField tfTaxValue;
    private javax.swing.JTextField tfTotal;
    // End of variables declaration//GEN-END:variables
   private void nullifyTableValue(){
       for (int i = 0; i < tbPurchaseInvoice.getRowCount(); i++){
        tbPurchaseInvoice.setValueAt(0, i, 2);
        tbPurchaseInvoice.setValueAt(0, i, 4);
           
       }
   }
    
    private void saveData() {

        if (option.equals("NEW")) {
            formToObject();
            purchaseInvoice.setCreateDatetime(new Date());
            purchaseInvoice.setCreateByUserRecordId(Main.getFrame().getLogin().getEmployeeRecordId());
            if (AppUtil.getService().save(purchaseInvoice)) {
                for (int i = 0; i < tbPurchaseInvoice.getRowCount(); i++) {
                    PurchaseInvoiceDetail invoiceDetail = new PurchaseInvoiceDetail();
                    invoiceDetail.setPurchaseInvoiceRecordId(purchaseInvoice.getRecordId());
                    invoiceDetail.setDescription(tbPurchaseInvoice.getValueAt(i, 1).toString());
                    invoiceDetail.setPrice(Double.parseDouble(tbPurchaseInvoice.getValueAt(i, 2).toString()));
                    invoiceDetail.setQty(Double.parseDouble(tbPurchaseInvoice.getValueAt(i, 3).toString()));
                    invoiceDetail.setSubtotal(Double.parseDouble(tbPurchaseInvoice.getValueAt(i, 4).toString()));
                    invoiceDetail.setCreateDatetime(new Date());
                    invoiceDetail.setCreateByUserRecordId(Main.getFrame().getLogin().getEmployeeRecordId());
                    AppUtil.getService().save(invoiceDetail);
                }
                Journal jurnal = new Journal();
                jurnal.setNo(Support.AutoNumber(AppUtil.getService().getJournalLast(), "J", Boolean.TRUE));
                jurnal.setDate(new Date());
                // 0 = Rent
                // 1 = Purchase Invoice
                jurnal.setTransactionFrom(1);
                jurnal.setTransactionRecordId(purchaseInvoice.getRecordId());
                jurnal.setCreateDatetime(new Date());
                jurnal.setCreateByUserRecordId(Main.getFrame().getLogin().getEmployeeRecordId());
                if (AppUtil.getService().save(jurnal)) {
                    JournalDetail jd = new JournalDetail();
                    jd.setJournalRecordId(jurnal.getRecordId());
                    jd.setAccountChartRecordId(116);
                    jd.setRelation(tfNo.getText());
                    jd.setDebetTransaction(Double.parseDouble(tfTotal.getText()));
                    jd.setCreditTransaction(0D);
                    AppUtil.getService().save(jd);
                    JournalDetail jd2 = new JournalDetail();
                    jd2.setJournalRecordId(jurnal.getRecordId());
                    jd2.setAccountChartRecordId(37);
                    jd2.setRelation(tfSupplierName.getText());
                    jd2.setDebetTransaction(0D);
                    jd2.setCreditTransaction(Double.parseDouble(tfTotal.getText()));
                    AppUtil.getService().save(jd2);
                    jurnal.setDebetBase(jd.getDebetTransaction());
                    jurnal.setCreditBase(jd2.getCreditTransaction());
                    AppUtil.getService().save(jurnal);
                }
                msg("Save Done!");
                Main.getFrame().getTab().removeTabAt(Main.getFrame().getTab().getSelectedIndex());

            } else {
                msg("Save Failed!");
            }

        } else if (option.equals("EDIT")) {
            formToObject();
            System.out.println(recordId);
            purchaseInvoice.setRecordId(recordId);
            if (AppUtil.getService().save(purchaseInvoice)) {
                for (int i = 0; i < tbPurchaseInvoice.getRowCount(); i++) {
                    PurchaseInvoiceDetail invoiceDetail = new PurchaseInvoiceDetail();
                    if (tbPurchaseInvoice.getValueAt(i, 0) != null) {
                        invoiceDetail.setPurchaseInvoiceRecordId((Integer) tbPurchaseInvoice.getValueAt(i, 0));
                    }
                    invoiceDetail.setRecordId(Integer.parseInt(tbPurchaseInvoice.getValueAt(i, 0).toString()));
                    invoiceDetail.setDescription(tbPurchaseInvoice.getValueAt(i, 1).toString());
                    invoiceDetail.setPrice(Double.parseDouble(tbPurchaseInvoice.getValueAt(i, 2).toString()));
                    invoiceDetail.setQty(Double.parseDouble(tbPurchaseInvoice.getValueAt(i, 3).toString()));
                    invoiceDetail.setSubtotal(Double.parseDouble(tbPurchaseInvoice.getValueAt(i, 4).toString()));
                    invoiceDetail.setCreateDatetime(new Date());
                    invoiceDetail.setCreateByUserRecordId(Main.getFrame().getLogin().getEmployeeRecordId());
                    AppUtil.getService().save(invoiceDetail);
                }
                Journal jurnal = AppUtil.getService().getJournalByTransactionId(1, recordId);
                if (AppUtil.getService().deleteJournalDetail(jurnal.getRecordId())) {
                    JournalDetail jd = new JournalDetail();
                    jd.setJournalRecordId(jurnal.getRecordId());
                    jd.setAccountChartRecordId(37);
                    jd.setRelation(tfNo.getText());
                    jd.setDebetTransaction(Double.parseDouble(tfTotal.getText()));
                    jd.setCreditTransaction(0D);
                    AppUtil.getService().save(jd);
                    JournalDetail jd2 = new JournalDetail();
                    jd2.setJournalRecordId(jurnal.getRecordId());
                    jd2.setAccountChartRecordId(02);
                    jd2.setRelation(tfSupplierName.getText());
                    jd2.setDebetTransaction(0D);
                    jd2.setCreditTransaction(Double.parseDouble(tfTotal.getText()));
                    AppUtil.getService().save(jd2);
                    jurnal.setDebetBase(jd.getDebetTransaction());
                    jurnal.setCreditBase(jd2.getCreditTransaction());
                    AppUtil.getService().save(jurnal);
                
                msg("Save Done!");
                Main.getFrame().getTab().removeTabAt(Main.getFrame().getTab().getSelectedIndex());
            } else {
                msg("Save Failed!");
            }
        }
    }
   }
    public void formToObject() {
        if (purchaseInvoice == null) {
            purchaseInvoice = new PurchaseInvoice();
        }
        purchaseInvoice.setNo(tfNo.getText());
        purchaseInvoice.setDate(dtDate.getDate());
        purchaseInvoice.setPurchaseOrderRecordId(orderno.get(cbOrderNo.getSelectedItem()));
        purchaseInvoice.setNote(taDescription.getText());
        purchaseInvoice.setTaxPercent(Double.parseDouble(tfTaxPercent.getText()));
        purchaseInvoice.setTaxValue(Double.parseDouble(tfTaxValue.getText()));
        purchaseInvoice.setDiscPercent(Double.parseDouble(tfDiscPercent.getText()));
        purchaseInvoice.setDiscValue(Double.parseDouble(tfDiscountValue.getText()));
        purchaseInvoice.setTotal(Double.parseDouble(tfTotal.getText()));
        purchaseInvoice.setSupplierName(tfSupplierName.getText());
        purchaseInvoice.setSubTotal(Double.parseDouble(tfSubTotal.getText()));
        purchaseInvoice.setCash(chCash.isSelected());
    }

    public void objectToForm() {
        if (purchaseInvoice != null) {
            tfNo.setText(purchaseInvoice.getNo());
            dtDate.setDate(purchaseInvoice.getDate());
            cbOrderNo.setSelectedItem(Support.getKeyFromValue(orderno, purchaseInvoice.getPurchaseOrderRecordId()));
            tfSubTotal.setText(purchaseInvoice.getSubTotal().toString());
            taDescription.setText(purchaseInvoice.getNote());
            tfSupplierName.setText(purchaseInvoice.getSupplierName());
            tfDiscPercent.setText(purchaseInvoice.getDiscPercent().toString());
            tfDiscountValue.setText(purchaseInvoice.getDiscValue().toString());
            tfTaxPercent.setText(purchaseInvoice.getTaxPercent().toString());
            tfTaxValue.setText(purchaseInvoice.getTaxValue().toString());
            tfTotal.setText(purchaseInvoice.getTotal().toString());
            chCash.setSelected(purchaseInvoice.getCash());

        }
    }

    private void abstractActionPerformed(java.awt.event.ActionEvent evt) {
        TableCellListener tcl = (TableCellListener) evt.getSource();
        int row = tbPurchaseInvoice.getSelectedRow();
        if (tbPurchaseInvoice.getSelectedRow() >= 0) {
            switch (tcl.getColumn()) {
                case 2: {
                    Double a;
                    if (tbPurchaseInvoice.getModel().getValueAt(row, 3) == null) {
                        a = 0.00;
                    } else {
                        a = Double.parseDouble(tbPurchaseInvoice.getModel().getValueAt(row, 3).toString());
                    }
                    Double b = (Double) tcl.getNewValue();
                    Double subtotal = a * b;
                    tbPurchaseInvoice.setValueAt(subtotal, row, 4);
                    count();
                    counttax();
                    break;
                }
                case 3: {
                    double a;
                    if (tbPurchaseInvoice.getModel().getValueAt(row, 2) == null) {
                        a = 0.00;
                    } else {
                        a = Double.parseDouble(String.valueOf(tbPurchaseInvoice.getModel().getValueAt(row, 2)));
                    }
                    int b = Integer.parseInt(tcl.getNewValue().toString());
                    double subtotal = a * b;
                    tbPurchaseInvoice.setValueAt(subtotal, row, 4);
                    count();
                    counttax();
                    break;
                }
                default:
                    break;
            }

        }
    }

    private AbstractAction saveAction() {
        AbstractAction save = new AbstractAction() {

            @Override
            public void actionPerformed(ActionEvent e) {
//                JOptionPane.showMessageDialog(RentData.this.tbRent, "Action Triggered.");
                tbPurchaseInvoice.editingCanceled(null);
                tbPurchaseInvoice.editingStopped(null);
                int selectedRow = tbPurchaseInvoice.getSelectedRow();
                if (selectedRow != -1) {
                    ((DefaultTableModel) tbPurchaseInvoice.getModel()).removeRow(selectedRow);
                    tbPurchaseInvoice.scrollRectToVisible(tbPurchaseInvoice.getCellRect(tbPurchaseInvoice.getRowCount() - 1, 0, true));
                }
            }
        };
        return save;
    }

    private void addRow() {
        DefaultTableModel model = (DefaultTableModel) tbPurchaseInvoice.getModel();
        if (model != null) {
            model.addRow(new Object[]{});
        }

    }

    public void refreshTable() {
        List<PurchaseOrderDetail> list = AppUtil.getService().getListOrderDetailById(orRecordId);
        DefaultTableModel dtm = (DefaultTableModel) tbPurchaseInvoice.getModel();
        dtm.setRowCount(0);
        for (PurchaseOrderDetail rd : list) {
            dtm.addRow(new Object[]{rd.getRecordId(), rd.getDescription(), rd.getPrice(), rd.getQty(), rd.getSubtotal()});
        }
    }

    public void refreshTable2() {
        List<PurchaseInvoiceDetail> list = AppUtil.getService().getListInvoiceDetailById(recordId);
        DefaultTableModel tm = (DefaultTableModel) tbPurchaseInvoice.getModel();
        tm.setRowCount(0);
        for (PurchaseInvoiceDetail id : list) {
            tm.addRow(new Object[]{id.getRecordId(), id.getDescription(), id.getPrice(), id.getQty(), id.getSubtotal()});
        }
    }

    public void count() {
        if (tbPurchaseInvoice.getRowCount() > 0) {
            Double subtotal = 0.00;

            for (int i = 0; i <= tbPurchaseInvoice.getRowCount() - 1; i++) {
                System.out.println("Value = " + tbPurchaseInvoice.getModel().getValueAt(i, 4));
                subtotal = subtotal + Double.parseDouble(tbPurchaseInvoice.getModel().getValueAt(i, 4).toString());
                System.out.println("Subtotal" + subtotal);
            }
            tfSubTotal.setText(subtotal.toString());
        }
    }

    public void counttax() {
        Double Total = 0.00;
        Double Tax;
        Double Discount;
        Tax = Double.parseDouble(tfTaxValue.getText());
        System.out.println(Tax);
        Discount = Double.parseDouble(tfDiscountValue.getText());
        System.out.println(Discount);
        for (int i = 0; i <= tbPurchaseInvoice.getRowCount() - 1; i++) {

            Total = Total + Double.parseDouble(tbPurchaseInvoice.getModel().getValueAt(i, 4).toString());

        }
        Total = Total - Discount + Tax;
        tfTotal.setText(Total.toString());
    }

    public void loadingData() {
        cbOrderNo.removeAllItems();
        AutoCompletion.enable(cbOrderNo);
        addRow();

        List<PurchaseOrder> orderlist = AppUtil.getService().getOrdersNotDeleted();
        for (PurchaseOrder Order : orderlist) {
            orderno.put(Order.getNo(), Order.getRecordId());
            cbOrderNo.addItem(Order.getNo());
        }
        List<Employer> employerlist = AppUtil.getService().getEmployersNotDeleted();
        for (Employer employe : employerlist) {
            employerID.put(employe.getName(), employe.getRecordId());

        }
        if (option.equals("NEW")) {
            tfNo.setText(Support.AutoNumber(AppUtil.getService().getPurchaseInvoiceLast(), "PI", Boolean.TRUE));
            tfSubTotal.setText("0");
            taDescription.setText("");
            dtDate.setDate(new Date());
            tfSupplierName.setText("");
            tfTaxPercent.setText("0");
            tfTaxValue.setText("0");
            tfDiscPercent.setText("0");
            tfDiscountValue.setText("0");
            tfTotal.setText("0");
        } else if (option.equals("EDIT")) {
            purchaseInvoice = AppUtil.getService().getInvoiceById(recordId);
            objectToForm();
            cbOrderNoActionPerformed(null);
            cbOrderNoItemStateChanged(null);
            cbOrderNo.setEditable(false);
            cbOrderNo.setEnabled(false);
            refreshTable2();
        }
    }
 public void cellrenderer(){
        TableColumnModel m = tbPurchaseInvoice.getColumnModel();
        DoubleCellRenderer dcr = new DoubleCellRenderer();
        m.getColumn(2).setCellRenderer(dcr);
          m.getColumn(4).setCellRenderer(dcr);
    }
    private void msg(String msg) {
        JOptionPane.showMessageDialog(null, msg);
    }
}
