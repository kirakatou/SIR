/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.sumames.sir.ui.purchase;

import com.sumames.sir.Main;
import com.sumames.sir.entity.PurchaseRequest;
import com.sumames.sir.entity.PurchaseRequestDetail;
import com.sumames.sir.entity.Employer;
import com.sumames.sir.entity.Journal;
import com.sumames.sir.entity.JournalDetail;

import com.sumames.sir.entity.PurchaseInvoice;
import com.sumames.sir.entity.PurchasePaymentInvoice;
import com.sumames.sir.entity.PurchasePayment;
import com.sumames.sir.helper.AppUtil;
import com.sumames.sir.helper.AutoCompletion;
import com.sumames.sir.helper.Support;
import com.sumames.sir.ui.renderer.DoubleCellRenderer;
import com.sumames.sir.ui.renderer.TableCellListener;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import javax.swing.AbstractAction;
import javax.swing.Action;
import javax.swing.JComponent;
import javax.swing.JOptionPane;
import javax.swing.KeyStroke;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumnModel;

/**
 *
 * @author My pc
 */
public class PurchasePaymentData extends javax.swing.JPanel {

    private String option;
    private int recordId;
    private int prRecordId;
    private Action action;
    private HashMap<String, Integer> mapAccess;
    private PurchaseRequest purchaserequest;
    private Employer employe;
    private HashMap<String, Integer> invoiceno;
    private HashMap<String, Integer> employerID;
    private PurchaseRequestDetail requestdetail;
    private PurchasePayment purchasePayment;
    private PurchaseInvoice purchaseInvoice;

    /**
     * Creates new form Purchase Request Input
     */
    public PurchasePaymentData(String option, int recordId) {
        this.option = option;
        this.recordId = recordId;
        initComponents();
        loadingData();
        addRowAfter();
        nullifyTableValue();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        buttonGroup3 = new javax.swing.ButtonGroup();
        btSave = new javax.swing.JButton();
        tfNo = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tbPurchasePayment = new javax.swing.JTable();
        btDelete = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        taDescription = new javax.swing.JTextArea();
        dtDate = new com.toedter.calendar.JDateChooser();
        jLabel2 = new javax.swing.JLabel();
        invoiceno = new HashMap();
        employerID = new HashMap();
        cbInvoiceNo = new javax.swing.JComboBox<>();
        tfSupplierName = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        tfTotal = new javax.swing.JTextField();

        setFont(new java.awt.Font("Noto Serif", 0, 14)); // NOI18N
        setOpaque(false);
        setPreferredSize(new java.awt.Dimension(844, 417));

        btSave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/sumames/sir/resources/image/buttons/6-01.png"))); // NOI18N
        btSave.setBorderPainted(false);
        btSave.setContentAreaFilled(false);
        btSave.setPreferredSize(new java.awt.Dimension(65, 23));
        btSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btSaveActionPerformed(evt);
            }
        });

        tfNo.setFont(getFont());
        tfNo.setPreferredSize(new java.awt.Dimension(100, 30));

        jLabel6.setFont(getFont());
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("No :");

        jLabel4.setFont(getFont());
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Description :");

        jLabel1.setFont(getFont());
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Date :");

        tbPurchasePayment.setFont(getFont());
        tbPurchasePayment.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Record Id", "Payable Value", "Cash Transaction", "Bank Transaction", "Giro Transaction","Total Payment","Note"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class,java.lang.Double.class,java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true, true, true,false,true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        KeyStroke keyStroke = KeyStroke.getKeyStroke(KeyEvent.VK_DELETE, 0);
        tbPurchasePayment.getActionMap().put("save", saveAction());
        tbPurchasePayment.getInputMap(JComponent.WHEN_FOCUSED).put(keyStroke, "save");

        action  = new AbstractAction() {
            public void actionPerformed(ActionEvent e) {
                abstractActionPerformed(e);
            }
        };
        TableCellListener tcl = new TableCellListener(tbPurchasePayment, action);
        tbPurchasePayment.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tbPurchasePaymentKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tbPurchasePaymentKeyReleased(evt);
            }
        });
        jScrollPane2.setViewportView(tbPurchasePayment);

        btDelete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/sumames/sir/resources/image/buttons/4-01.png"))); // NOI18N
        btDelete.setBorder(null);
        btDelete.setContentAreaFilled(false);

        taDescription.setColumns(20);
        taDescription.setRows(5);
        jScrollPane1.setViewportView(taDescription);

        dtDate.setOpaque(false);
        dtDate.setPreferredSize(new java.awt.Dimension(100, 30));

        jLabel2.setFont(getFont());
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Invoice No");

        cbInvoiceNo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cbInvoiceNo.setPreferredSize(new java.awt.Dimension(100, 30));
        cbInvoiceNo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbInvoiceNoItemStateChanged(evt);
            }
        });
        cbInvoiceNo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbInvoiceNoActionPerformed(evt);
            }
        });

        tfSupplierName.setFont(getFont());
        tfSupplierName.setPreferredSize(new java.awt.Dimension(100, 30));

        jLabel8.setFont(getFont());
        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setText("Supplier Name");

        jLabel9.setFont(getFont());
        jLabel9.setForeground(new java.awt.Color(255, 255, 255));
        jLabel9.setText("Total :");

        tfTotal.setEditable(false);
        tfTotal.setFont(getFont());
        tfTotal.setEnabled(false);
        tfTotal.setPreferredSize(new java.awt.Dimension(100, 30));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.TRAILING))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(tfNo, javax.swing.GroupLayout.DEFAULT_SIZE, 174, Short.MAX_VALUE)
                                    .addComponent(dtDate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cbInvoiceNo, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel8)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(tfSupplierName, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel9)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(tfTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 208, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(btSave, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btDelete)))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {cbInvoiceNo, dtDate, tfNo, tfSupplierName, tfTotal});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(btSave, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(tfNo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(5, 5, 5)
                                .addComponent(jLabel6))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                                .addComponent(jLabel8)
                                .addComponent(tfSupplierName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                                    .addComponent(jLabel1)
                                    .addComponent(dtDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(cbInvoiceNo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel2)))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel9)
                                    .addComponent(tfTotal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(48, 48, 48))))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 269, Short.MAX_VALUE)
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {cbInvoiceNo, dtDate, tfNo, tfSupplierName, tfTotal});

    }// </editor-fold>//GEN-END:initComponents

    private void btSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btSaveActionPerformed
        saveData();
    }//GEN-LAST:event_btSaveActionPerformed

    private void cbInvoiceNoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbInvoiceNoActionPerformed
        if (invoiceno.get(cbInvoiceNo.getSelectedItem()) == null) {
            this.prRecordId = 0;
        } else {
            this.prRecordId = invoiceno.get(cbInvoiceNo.getSelectedItem());
           
        }
        getTotal();
        cellrenderer();
    }//GEN-LAST:event_cbInvoiceNoActionPerformed

    private void cbInvoiceNoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbInvoiceNoItemStateChanged
        if (invoiceno.get(cbInvoiceNo.getSelectedItem()) == null) {
            this.prRecordId = 0;
        } else {
            this.prRecordId = invoiceno.get(cbInvoiceNo.getSelectedItem());
            getTotal();
        }


    }//GEN-LAST:event_cbInvoiceNoItemStateChanged

    private void tbPurchasePaymentKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tbPurchasePaymentKeyPressed
     cellrenderer();
        if (evt.getID() == KeyEvent.KEY_PRESSED) {
            if (evt.getKeyCode() == KeyEvent.VK_DOWN) {
                if (tbPurchasePayment.getSelectedRow() == tbPurchasePayment.getRowCount() - 1) {
                    addRow();
                }
            }
        }
        
    }//GEN-LAST:event_tbPurchasePaymentKeyPressed

    private void tbPurchasePaymentKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tbPurchasePaymentKeyReleased
cellrenderer();
    }//GEN-LAST:event_tbPurchasePaymentKeyReleased


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btDelete;
    private javax.swing.JButton btSave;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.ButtonGroup buttonGroup3;
    private javax.swing.JComboBox<String> cbInvoiceNo;
    private com.toedter.calendar.JDateChooser dtDate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea taDescription;
    private javax.swing.JTable tbPurchasePayment;
    private javax.swing.JTextField tfNo;
    private javax.swing.JTextField tfSupplierName;
    private javax.swing.JTextField tfTotal;
    // End of variables declaration//GEN-END:variables
   private void saveData() {

        if (option.equals("NEW")) {
            formToObject();
            purchasePayment.setCreateDatetime(new Date());
            purchasePayment.setCreateByUserRecordId(Main.getFrame().getLogin().getEmployeeRecordId());
            if (AppUtil.getService().save(purchasePayment)) {
                for (int i = 0; i < tbPurchasePayment.getRowCount(); i++) {
                    PurchasePaymentInvoice PaymentDetail = new PurchasePaymentInvoice();
                    if(tbPurchasePayment.getValueAt(i, 2) != null){
                   
                    PaymentDetail.setPurchasePaymentRecordId(purchasePayment.getRecordId());
//                    PaymentDetail.setPayableValue(Double.parseDouble(tbPurchasePayment.getValueAt(i, 1).toString()));
                    PaymentDetail.setCashTransaction(Double.parseDouble(tbPurchasePayment.getValueAt(i, 2).toString()));
//                    PaymentDetail.setBankTransaction(0D);
//                    PaymentDetail.setGiroTransaction(0D);
                    PaymentDetail.setTotalPayment(Double.parseDouble(tbPurchasePayment.getValueAt(i, 5).toString()));
                    PaymentDetail.setNote(tbPurchasePayment.getValueAt(i, 6).toString());
                    PaymentDetail.setCreateDatetime(new Date());
                    PaymentDetail.setCreateByUserRecordId(Main.getFrame().getLogin().getEmployeeRecordId());
                    AppUtil.getService().save(PaymentDetail);
                }if(tbPurchasePayment.getValueAt(i, 3) != null){
                  
                    PaymentDetail.setPurchasePaymentRecordId(purchasePayment.getRecordId());
//                    PaymentDetail.setPayableValue(0D);
//                    PaymentDetail.setCashTransaction(0D);
                    PaymentDetail.setBankTransaction(Double.parseDouble(tbPurchasePayment.getValueAt(i, 3).toString()));
//                    PaymentDetail.setGiroTransaction(0D);
                    PaymentDetail.setTotalPayment(Double.parseDouble(tbPurchasePayment.getValueAt(i, 5).toString()));
                    PaymentDetail.setNote(tbPurchasePayment.getValueAt(i, 6).toString());
                    PaymentDetail.setCreateDatetime(new Date());
                    PaymentDetail.setCreateByUserRecordId(Main.getFrame().getLogin().getEmployeeRecordId());
                    AppUtil.getService().save(PaymentDetail);
                }if(tbPurchasePayment.getValueAt(i, 4) != null){
                  
                    PaymentDetail.setPurchasePaymentRecordId(purchasePayment.getRecordId());
//                    PaymentDetail.setPayableValue(0D);
//                    PaymentDetail.setCashTransaction(0D);
//                    PaymentDetail.setBankTransaction(0D);
                    PaymentDetail.setGiroTransaction(Double.parseDouble(tbPurchasePayment.getValueAt(i, 4).toString()));
                    PaymentDetail.setTotalPayment(Double.parseDouble(tbPurchasePayment.getValueAt(i, 5).toString()));
                    PaymentDetail.setNote(tbPurchasePayment.getValueAt(i, 6).toString());
                    PaymentDetail.setCreateDatetime(new Date());
                    PaymentDetail.setCreateByUserRecordId(Main.getFrame().getLogin().getEmployeeRecordId());
                    AppUtil.getService().save(PaymentDetail);
                }if(tbPurchasePayment.getValueAt(i, 1) != null){
                    
                    PaymentDetail.setPurchasePaymentRecordId(purchasePayment.getRecordId());
                    PaymentDetail.setPayableValue(Double.parseDouble(tbPurchasePayment.getValueAt(i, 1).toString()));
//                    PaymentDetail.setCashTransaction(0D);
//                    PaymentDetail.setBankTransaction(0D);
//                    PaymentDetail.setGiroTransaction(Double.parseDouble(tbPurchasePayment.getValueAt(i, 4).toString()));
                    PaymentDetail.setTotalPayment(Double.parseDouble(tbPurchasePayment.getValueAt(i, 5).toString()));
                    PaymentDetail.setNote(tbPurchasePayment.getValueAt(i, 6).toString());
                    PaymentDetail.setCreateDatetime(new Date());
                    PaymentDetail.setCreateByUserRecordId(Main.getFrame().getLogin().getEmployeeRecordId());
                    AppUtil.getService().save(PaymentDetail);
                }}
                  Journal jurnal = new Journal();
                jurnal.setNo(Support.AutoNumber(AppUtil.getService().getJournalLast(), "J", Boolean.TRUE));
                jurnal.setDate(new Date());
                // 0 = Rent
                // 1 = Purchase Invoice
                jurnal.setTransactionFrom(1);
                jurnal.setTransactionRecordId(recordId);
                jurnal.setCreateDatetime(new Date());
                jurnal.setCreateByUserRecordId(Main.getFrame().getLogin().getEmployeeRecordId());
                if (AppUtil.getService().save(jurnal)) {
                       JournalDetail jd = new JournalDetail();
                      for (int i = 0; i < tbPurchasePayment.getRowCount(); i++) {
                          if(tbPurchasePayment.getValueAt(i, 2) != null ) {              
                    jd.setJournalRecordId(jurnal.getRecordId());
                    jd.setAccountChartRecordId(37);
                    jd.setRelation(tfNo.getText());
                    jd.setDebetTransaction(Double.parseDouble(tbPurchasePayment.getValueAt(i,2).toString()));
                    jd.setCreditTransaction(0D);
                    AppUtil.getService().save(jd);
                    JournalDetail jd2 = new JournalDetail();
                    jd2.setJournalRecordId(jurnal.getRecordId());
                    jd2.setAccountChartRecordId(02);
                    jd2.setRelation(tfSupplierName.getText());
                    jd2.setDebetTransaction(0D);
                    jd2.setCreditTransaction(Double.parseDouble(tbPurchasePayment.getValueAt(i, 2).toString()));
                    AppUtil.getService().save(jd2);
                    jurnal.setDebetBase(jd.getDebetTransaction());
                    jurnal.setCreditBase(jd2.getCreditTransaction());
                    AppUtil.getService().save(jurnal);
                          }
                    if(tbPurchasePayment.getValueAt(i, 3) != null){
                         jd.setJournalRecordId(jurnal.getRecordId());
                    jd.setAccountChartRecordId(37);
                    jd.setRelation(tfNo.getText());
                    jd.setDebetTransaction(Double.parseDouble(tbPurchasePayment.getValueAt(i,3).toString()));
                    jd.setCreditTransaction(0D);
                    AppUtil.getService().save(jd);
                    JournalDetail jd2 = new JournalDetail();
                    jd2.setJournalRecordId(jurnal.getRecordId());
                    jd2.setAccountChartRecordId(04);
                    jd2.setRelation(tfSupplierName.getText());
                    jd2.setDebetTransaction(0D);
                    jd2.setCreditTransaction(Double.parseDouble(tbPurchasePayment.getValueAt(i, 3).toString()));
                    AppUtil.getService().save(jd2);
                    jurnal.setDebetBase(jd.getDebetTransaction());
                    jurnal.setCreditBase(jd2.getCreditTransaction());
                    AppUtil.getService().save(jurnal);
                    }
                    if(tbPurchasePayment.getValueAt(i, 4) != null){
                         jd.setJournalRecordId(jurnal.getRecordId());
                    jd.setAccountChartRecordId(37);
                    jd.setRelation(tfNo.getText());
                    jd.setDebetTransaction(Double.parseDouble(tbPurchasePayment.getValueAt(i,4).toString()));
                    jd.setCreditTransaction(0D);
                    AppUtil.getService().save(jd);
                    JournalDetail jd2 = new JournalDetail();
                    jd2.setJournalRecordId(jurnal.getRecordId());
                    jd2.setAccountChartRecordId(38);
                    jd2.setRelation(tfSupplierName.getText());
                    jd2.setDebetTransaction(0D);
                    jd2.setCreditTransaction(Double.parseDouble(tbPurchasePayment.getValueAt(i, 4).toString()));
                    AppUtil.getService().save(jd2);
                    jurnal.setDebetBase(jd.getDebetTransaction());
                    jurnal.setCreditBase(jd2.getCreditTransaction());
                    AppUtil.getService().save(jurnal);
                    }
                      }
                }
                msg("Save Done!");
                Main.getFrame().getTab().removeTabAt(Main.getFrame().getTab().getSelectedIndex());

            } else {
                msg("Save Failed!");
            }

        } else if (option.equals("EDIT")) {
            formToObject();
            purchasePayment.setRecordId(recordId);
            System.out.println("record id = c" + recordId);
            if (AppUtil.getService().save(purchasePayment)) {
                for (int i = 0; i < tbPurchasePayment.getRowCount(); i++) {
                    PurchasePaymentInvoice PaymentDetail = new PurchasePaymentInvoice();
                    if (tbPurchasePayment.getValueAt(i, 0) != null) {
                        PaymentDetail.setPurchasePaymentRecordId((Integer) tbPurchasePayment.getValueAt(i, 0));
                    }
                      if(tbPurchasePayment.getValueAt(i, 2) != null){
                   PaymentDetail.setRecordId(Integer.parseInt(tbPurchasePayment.getValueAt(i, 0).toString()));
//                    PaymentDetail.setPayableValue(0D);
                    PaymentDetail.setCashTransaction(Double.parseDouble(tbPurchasePayment.getValueAt(i, 2).toString()));
//                    PaymentDetail.setBankTransaction(0D);
//                    PaymentDetail.setGiroTransaction(0D);
                    PaymentDetail.setTotalPayment(Double.parseDouble(tbPurchasePayment.getValueAt(i, 5).toString()));
                    PaymentDetail.setNote(tbPurchasePayment.getValueAt(i, 6).toString());
                    PaymentDetail.setCreateDatetime(new Date());
                    PaymentDetail.setCreateByUserRecordId(Main.getFrame().getLogin().getEmployeeRecordId());
                    AppUtil.getService().save(PaymentDetail);
                }if(tbPurchasePayment.getValueAt(i, 3) != null){
                  
                   PaymentDetail.setRecordId(Integer.parseInt(tbPurchasePayment.getValueAt(i, 0).toString()));
//                    PaymentDetail.setPayableValue(0D);
//                    PaymentDetail.setCashTransaction(0D);
                    PaymentDetail.setBankTransaction(Double.parseDouble(tbPurchasePayment.getValueAt(i, 3).toString()));
//                    PaymentDetail.setGiroTransaction(0D);
                    PaymentDetail.setTotalPayment(Double.parseDouble(tbPurchasePayment.getValueAt(i, 5).toString()));
                    PaymentDetail.setNote(tbPurchasePayment.getValueAt(i, 6).toString());
                    PaymentDetail.setCreateDatetime(new Date());
                    PaymentDetail.setCreateByUserRecordId(Main.getFrame().getLogin().getEmployeeRecordId());
                    AppUtil.getService().save(PaymentDetail);
                }if(tbPurchasePayment.getValueAt(i, 4) != null){
                  
                  PaymentDetail.setRecordId(Integer.parseInt(tbPurchasePayment.getValueAt(i, 0).toString()));
//                    PaymentDetail.setPayableValue(0D);
//                    PaymentDetail.setCashTransaction(0D);
//                    PaymentDetail.setBankTransaction(0D);
                    PaymentDetail.setGiroTransaction(Double.parseDouble(tbPurchasePayment.getValueAt(i, 4).toString()));
                    PaymentDetail.setTotalPayment(Double.parseDouble(tbPurchasePayment.getValueAt(i, 5).toString()));
                    PaymentDetail.setNote(tbPurchasePayment.getValueAt(i, 6).toString());
                    PaymentDetail.setCreateDatetime(new Date());
                    PaymentDetail.setCreateByUserRecordId(Main.getFrame().getLogin().getEmployeeRecordId());
                    AppUtil.getService().save(PaymentDetail);
                }if(tbPurchasePayment.getValueAt(i, 1) != null){
                    
                  PaymentDetail.setRecordId(Integer.parseInt(tbPurchasePayment.getValueAt(i, 0).toString()));
                    PaymentDetail.setPayableValue(Double.parseDouble(tbPurchasePayment.getValueAt(i, 1).toString()));
//                    PaymentDetail.setCashTransaction(0D);
//                    PaymentDetail.setBankTransaction(0D);
//                    PaymentDetail.setGiroTransaction(Double.parseDouble(tbPurchasePayment.getValueAt(i, 4).toString()));
                    PaymentDetail.setTotalPayment(Double.parseDouble(tbPurchasePayment.getValueAt(i, 5).toString()));
                    PaymentDetail.setNote(tbPurchasePayment.getValueAt(i, 6).toString());
                    PaymentDetail.setCreateDatetime(new Date());
                    PaymentDetail.setCreateByUserRecordId(Main.getFrame().getLogin().getEmployeeRecordId());
                    AppUtil.getService().save(PaymentDetail);
                }}
                
                 Journal jurnal = AppUtil.getService().getJournalByTransactionId(1, recordId);
                if (AppUtil.getService().deleteJournalDetail(jurnal.getRecordId())) {
                       JournalDetail jd = new JournalDetail();
                      for (int i = 0; i < tbPurchasePayment.getRowCount(); i++) {
                          if(tbPurchasePayment.getValueAt(i, 2) != null ) {              
                    jd.setJournalRecordId(jurnal.getRecordId());
                    jd.setAccountChartRecordId(37);
                    jd.setRelation(tfNo.getText());
                    jd.setDebetTransaction(Double.parseDouble(tbPurchasePayment.getValueAt(i,2).toString()));
                    jd.setCreditTransaction(0D);
                    AppUtil.getService().save(jd);
                    JournalDetail jd2 = new JournalDetail();
                    jd2.setJournalRecordId(jurnal.getRecordId());
                    jd2.setAccountChartRecordId(02);
                    jd2.setRelation(tfSupplierName.getText());
                    jd2.setDebetTransaction(0D);
                    jd2.setCreditTransaction(Double.parseDouble(tbPurchasePayment.getValueAt(i, 2).toString()));
                    AppUtil.getService().save(jd2);
                    jurnal.setDebetBase(jd.getDebetTransaction());
                    jurnal.setCreditBase(jd2.getCreditTransaction());
                    AppUtil.getService().save(jurnal);
                          }
                    if(tbPurchasePayment.getValueAt(i, 3) != null){
                         jd.setJournalRecordId(jurnal.getRecordId());
                    jd.setAccountChartRecordId(37);
                    jd.setRelation(tfNo.getText());
                    jd.setDebetTransaction(Double.parseDouble(tbPurchasePayment.getValueAt(i,3).toString()));
                    jd.setCreditTransaction(0D);
                    AppUtil.getService().save(jd);
                    JournalDetail jd2 = new JournalDetail();
                    jd2.setJournalRecordId(jurnal.getRecordId());
                    jd2.setAccountChartRecordId(04);
                    jd2.setRelation(tfSupplierName.getText());
                    jd2.setDebetTransaction(0D);
                    jd2.setCreditTransaction(Double.parseDouble(tbPurchasePayment.getValueAt(i, 3).toString()));
                    AppUtil.getService().save(jd2);
                    jurnal.setDebetBase(jd.getDebetTransaction());
                    jurnal.setCreditBase(jd2.getCreditTransaction());
                    AppUtil.getService().save(jurnal);
                    }
                    if(tbPurchasePayment.getValueAt(i, 4) != null){
                         jd.setJournalRecordId(jurnal.getRecordId());
                    jd.setAccountChartRecordId(37);
                    jd.setRelation(tfNo.getText());
                    jd.setDebetTransaction(Double.parseDouble(tbPurchasePayment.getValueAt(i,4).toString()));
                    jd.setCreditTransaction(0D);
                    AppUtil.getService().save(jd);
                    JournalDetail jd2 = new JournalDetail();
                    jd2.setJournalRecordId(jurnal.getRecordId());
                    jd2.setAccountChartRecordId(38);
                    jd2.setRelation(tfSupplierName.getText());
                    jd2.setDebetTransaction(0D);
                    jd2.setCreditTransaction(Double.parseDouble(tbPurchasePayment.getValueAt(i, 4).toString()));
                    AppUtil.getService().save(jd2);
                    jurnal.setDebetBase(jd.getDebetTransaction());
                    jurnal.setCreditBase(jd2.getCreditTransaction());
                    AppUtil.getService().save(jurnal);
                    }
                      }
                }
                
                   
                msg("Save Done!");
                Main.getFrame().getTab().removeTabAt(Main.getFrame().getTab().getSelectedIndex());
            } else {
                msg("Save Failed!");
            }
        }
    }

    public void formToObject() {
        if (purchasePayment == null) {
            purchasePayment = new PurchasePayment();
        }
        purchasePayment.setNo(tfNo.getText());
        purchasePayment.setDate(dtDate.getDate());
        purchasePayment.setVoucherRecordId(invoiceno.get(cbInvoiceNo.getSelectedItem()));
        purchasePayment.setNote(taDescription.getText());
        purchasePayment.setTotalPaymentBase(Double.parseDouble(tfTotal.getText()));
        purchasePayment.setSupplierName(tfSupplierName.getText());

    }

    public void objectToForm() {
        if (purchasePayment != null) {
            tfNo.setText(purchasePayment.getNo());
            dtDate.setDate(purchasePayment.getDate());
            cbInvoiceNo.setSelectedItem(Support.getKeyFromValue(invoiceno, purchasePayment.getVoucherRecordId()));
            tfTotal.setText(purchasePayment.getTotalPaymentBase().toString());
            taDescription.setText(purchasePayment.getNote());
            tfSupplierName.setText(purchasePayment.getSupplierName());

        }
    }

    public void getTotal() {
        List<PurchaseInvoice> invoicelist = AppUtil.getService().getListPurchaseInvoiceById(prRecordId);
        for (PurchaseInvoice invoice : invoicelist) {
            invoiceno.put(invoice.getNo(), invoice.getRecordId());
            tfTotal.setText(invoice.getTotal().toString());
        }
    }

    private void abstractActionPerformed(java.awt.event.ActionEvent evt) {
        TableCellListener tcl = (TableCellListener) evt.getSource();
        int row = tbPurchasePayment.getSelectedRow();
        Double Total = 0.00;
        if (tbPurchasePayment.getSelectedRow() >= 0) {
            switch (tcl.getColumn()) {
                case 1: {
                    Double a = 0.00;
                    Double b = 0.00;
                    Double c = 0.00;

                    if (tbPurchasePayment.getModel().getValueAt(row, 2) != null) {
                        a = Double.parseDouble(tbPurchasePayment.getModel().getValueAt(row, 2).toString());
                    } else {

                    }
                    if (tbPurchasePayment.getModel().getValueAt(row, 3) != null) {
                        b = Double.parseDouble(tbPurchasePayment.getModel().getValueAt(row, 3).toString());
                    } else {
                    }
                    if (tbPurchasePayment.getModel().getValueAt(row, 4) != null) {
                        c = Double.parseDouble(tbPurchasePayment.getModel().getValueAt(row, 4).toString());
                    } else {

                    }
                    Double d = (Double) tcl.getNewValue();
                    Total = a + b + c + d;
                    tbPurchasePayment.setValueAt(Total, row, 5);
                    break;
                }
                case 2: {
                    Double a = 0.00;
                    Double b = 0.00;
                    Double c = 0.00;

                    if (tbPurchasePayment.getModel().getValueAt(row, 3) != null) {
                        a = Double.parseDouble(tbPurchasePayment.getModel().getValueAt(row, 3).toString());
                    } else {
                    }
                    if (tbPurchasePayment.getModel().getValueAt(row, 4) != null) {
                        b = Double.parseDouble(tbPurchasePayment.getModel().getValueAt(row, 4).toString());
                    } else {
                    }
                    if (tbPurchasePayment.getModel().getValueAt(row, 1) != null) {
                        c = Double.parseDouble(tbPurchasePayment.getModel().getValueAt(row, 1).toString());
                    } else {

                    }
                    Double d = (Double) tcl.getNewValue();
                    Total = a + b + c + d;
                    tbPurchasePayment.setValueAt(Total, row, 5);
                    break;
                }
                case 3: {
                    Double a = 0.00;
                    Double b = 0.00;
                    Double c = 0.00;

                    if (tbPurchasePayment.getModel().getValueAt(row, 4) != null) {
                        a = Double.parseDouble(tbPurchasePayment.getModel().getValueAt(row, 4).toString());
                    } else {
                    }
                    if (tbPurchasePayment.getModel().getValueAt(row, 1) != null) {
                        b = Double.parseDouble(tbPurchasePayment.getModel().getValueAt(row, 1).toString());
                    } else {
                    }
                    if (tbPurchasePayment.getModel().getValueAt(row, 2) != null) {
                        c = Double.parseDouble(tbPurchasePayment.getModel().getValueAt(row, 2).toString());
                    } else {

                    }
                    Double d = (Double) tcl.getNewValue();
                    Total = a + b + c + d;
                    tbPurchasePayment.setValueAt(Total, row, 5);
                    break;
                }
                case 4: {
                    Double a = 0.00;
                    Double b = 0.00;
                    Double c = 0.00;

                    if (tbPurchasePayment.getModel().getValueAt(row, 1) != null) {
                        a = Double.parseDouble(tbPurchasePayment.getModel().getValueAt(row, 1).toString());
                    } else {
                    }
                    if (tbPurchasePayment.getModel().getValueAt(row, 2) != null) {
                        b = Double.parseDouble(tbPurchasePayment.getModel().getValueAt(row, 2).toString());
                    } else {
                    }
                    if (tbPurchasePayment.getModel().getValueAt(row, 3) != null) {
                        c = Double.parseDouble(tbPurchasePayment.getModel().getValueAt(row, 3).toString());
                    } else {

                    }
                    Double d = (Double) tcl.getNewValue();
                    Total = a + b + c + d;
                    tbPurchasePayment.setValueAt(Total, row, 5);
                    break;
                }
                default:
                    break;
            }

        }
    }

    private AbstractAction saveAction() {
        AbstractAction save = new AbstractAction() {

            @Override
            public void actionPerformed(ActionEvent e) {
//                JOptionPane.showMessageDialog(RentData.this.tbRent, "Action Triggered.");
                tbPurchasePayment.editingCanceled(null);
                tbPurchasePayment.editingStopped(null);
                int selectedRow = tbPurchasePayment.getSelectedRow();
                if (selectedRow != -1) {
                    ((DefaultTableModel) tbPurchasePayment.getModel()).removeRow(selectedRow);
                    tbPurchasePayment.scrollRectToVisible(tbPurchasePayment.getCellRect(tbPurchasePayment.getRowCount() - 1, 0, true));
                }
            }
        };
        return save;
    }

    private void addRow() {
        DefaultTableModel model = (DefaultTableModel) tbPurchasePayment.getModel();
        if (model != null) {
            model.addRow(new Object[]{});
        }

    }

    private void addRowAfter() {
        DefaultTableModel model = (DefaultTableModel) tbPurchasePayment.getModel();
        if (model == null) {
            model.addRow(new Object[]{});
        }
    }

    public void refreshTable() {
        List<PurchasePaymentInvoice> list = AppUtil.getService().getListPaymentInvoiceById(recordId);     
        DefaultTableModel dtm = (DefaultTableModel) tbPurchasePayment.getModel();
        dtm.setRowCount(0);
        for (PurchasePaymentInvoice rd : list) {
            dtm.addRow(new Object[]{rd.getRecordId(), rd.getPayableValue(), rd.getCashTransaction(), rd.getBankTransaction(), rd.getGiroTransaction(), rd.getTotalPayment(), rd.getNote()});
        }
    }

    public void loadingData() {
        cbInvoiceNo.removeAllItems();
        AutoCompletion.enable(cbInvoiceNo);
        addRow();

        List<PurchaseInvoice> invoicelist = AppUtil.getService().getInvoicesNotDeleted();
        for (PurchaseInvoice invoice : invoicelist) {
            invoiceno.put(invoice.getNo(), invoice.getRecordId());
            cbInvoiceNo.addItem(invoice.getNo());
        }
        List<Employer> employerlist = AppUtil.getService().getEmployersNotDeleted();
        for (Employer employe : employerlist) {
            employerID.put(employe.getName(), employe.getRecordId());

        }
        if (option.equals("NEW")) {
            tfNo.setText(Support.AutoNumber(AppUtil.getService().getPurchasePaymentLast(), "PP", Boolean.TRUE));
            taDescription.setText("");
            dtDate.setDate(new Date());
        } else if (option.equals("EDIT")) {
            purchasePayment = AppUtil.getService().getPaymentById(recordId);
            objectToForm();
            refreshTable();
        }
    }
    public void nullifyTableValue(){
       for (int i = 0; i < tbPurchasePayment.getRowCount(); i++){
        tbPurchasePayment.setValueAt(0.00, i, 1);
        tbPurchasePayment.setValueAt(0.00, i, 2);
         tbPurchasePayment.setValueAt(0.00, i, 3);
          tbPurchasePayment.setValueAt(0.00, i, 4);
           tbPurchasePayment.setValueAt(0.00, i, 5);
           
       }
   }
 public void cellrenderer(){
        TableColumnModel m = tbPurchasePayment.getColumnModel();
        DoubleCellRenderer dcr = new DoubleCellRenderer();
        m.getColumn(1).setCellRenderer(dcr);
        m.getColumn(2).setCellRenderer(dcr);
        m.getColumn(3).setCellRenderer(dcr);
        m.getColumn(4).setCellRenderer(dcr);
        m.getColumn(5).setCellRenderer(dcr);
    }
    private void msg(String msg) {
        JOptionPane.showMessageDialog(null, msg);
    }
}
