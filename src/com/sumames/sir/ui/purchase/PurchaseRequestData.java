/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.sumames.sir.ui.purchase;

import com.sumames.sir.Main;
import com.sumames.sir.entity.PurchaseRequest;
import com.sumames.sir.entity.PurchaseRequestDetail;
import com.sumames.sir.entity.Employer;
import com.sumames.sir.helper.AppUtil;
import com.sumames.sir.helper.AutoCompletion;
import com.sumames.sir.helper.Support;
import com.sumames.sir.ui.renderer.DoubleCellRenderer;
import com.sumames.sir.ui.renderer.TableCellListener;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import javax.swing.AbstractAction;
import javax.swing.Action;
import javax.swing.JComponent;
import javax.swing.JOptionPane;
import javax.swing.KeyStroke;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumnModel;

/**
 *
 * @author My pc
 */
public class PurchaseRequestData extends javax.swing.JPanel {

    private String option;
    private int recordId;
    private Action action;
    private HashMap<String, Integer> mapAccess;
    private PurchaseRequest purchaserequest;
    private Employer employe;
    private HashMap<String, Integer> employerID;
    private PurchaseRequestDetail requestdetail;

    /**
     * Creates new form Purchase Request Input
     */
    public PurchaseRequestData(String option, int recordId) {
        this.option = option;
        this.recordId = recordId;
        System.out.println(recordId);
        initComponents();
        loadingData();
        nullifyTableValue();
        cellrenderer();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btSave = new javax.swing.JButton();
        tfNo = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tbPurchaseRequest = new javax.swing.JTable();
        btDelete = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        taDescription = new javax.swing.JTextArea();
        DateRequested = new com.toedter.calendar.JDateChooser();
        cbrequestbyid = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        cbrequestbyname = new javax.swing.JComboBox<>();
        cbagree = new javax.swing.JCheckBox();
        cbdepartment = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        DateNeeded = new com.toedter.calendar.JDateChooser();
        jLabel5 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        tfTotal = new javax.swing.JTextField();

        setFont(new java.awt.Font("Noto Serif", 0, 14)); // NOI18N
        setOpaque(false);
        setPreferredSize(new java.awt.Dimension(844, 417));

        btSave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/sumames/sir/resources/image/buttons/6-01.png"))); // NOI18N
        btSave.setBorderPainted(false);
        btSave.setContentAreaFilled(false);
        btSave.setPreferredSize(new java.awt.Dimension(65, 23));
        btSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btSaveActionPerformed(evt);
            }
        });

        tfNo.setFont(getFont());
        tfNo.setPreferredSize(new java.awt.Dimension(100, 30));

        jLabel6.setFont(getFont());
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("No :");

        jLabel4.setFont(getFont());
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Description :");

        jLabel1.setFont(getFont());
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Date :");

        tbPurchaseRequest.setFont(getFont());
        tbPurchaseRequest.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Record Id", "Description", "Est.Price", "Qty", "Subtotal"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Double.class, java.lang.Integer.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true, true, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        KeyStroke keyStroke = KeyStroke.getKeyStroke(KeyEvent.VK_DELETE, 0);
        tbPurchaseRequest.getActionMap().put("save", saveAction());
        tbPurchaseRequest.getInputMap(JComponent.WHEN_FOCUSED).put(keyStroke, "save");

        action  = new AbstractAction() {
            public void actionPerformed(ActionEvent e) {
                abstractActionPerformed(e);
            }
        };
        TableCellListener tcl = new TableCellListener(tbPurchaseRequest, action);
        tbPurchaseRequest.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tbPurchaseRequestKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tbPurchaseRequestKeyReleased(evt);
            }
        });
        jScrollPane2.setViewportView(tbPurchaseRequest);
        if (tbPurchaseRequest.getColumnModel().getColumnCount() > 0) {
            tbPurchaseRequest.getColumnModel().getColumn(0).setMinWidth(0);
            tbPurchaseRequest.getColumnModel().getColumn(0).setMaxWidth(0);
        }

        btDelete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/sumames/sir/resources/image/buttons/4-01.png"))); // NOI18N
        btDelete.setBorder(null);
        btDelete.setContentAreaFilled(false);
        btDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btDeleteActionPerformed(evt);
            }
        });

        taDescription.setColumns(20);
        taDescription.setRows(5);
        jScrollPane1.setViewportView(taDescription);

        DateRequested.setOpaque(false);
        DateRequested.setPreferredSize(new java.awt.Dimension(100, 30));

        cbrequestbyid.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cbrequestbyid.setPreferredSize(new java.awt.Dimension(100, 30));

        jLabel2.setFont(getFont());
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Request By :");

        cbrequestbyname.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cbrequestbyname.setPreferredSize(new java.awt.Dimension(100, 30));
        cbrequestbyname.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbrequestbynameActionPerformed(evt);
            }
        });

        cbagree.setFont(getFont());
        cbagree.setForeground(new java.awt.Color(255, 255, 255));
        cbagree.setText("Agreed");
        cbagree.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        cbagree.setOpaque(false);

        cbdepartment.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Purchase", "Rent", "Accounting" }));
        cbdepartment.setPreferredSize(new java.awt.Dimension(100, 30));
        cbdepartment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbdepartmentActionPerformed(evt);
            }
        });

        jLabel3.setFont(getFont());
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Departement");

        DateNeeded.setOpaque(false);
        DateNeeded.setPreferredSize(new java.awt.Dimension(100, 30));

        jLabel5.setFont(getFont());
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Date needed :");

        jLabel7.setFont(getFont());
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("Total :");

        tfTotal.setEditable(false);
        tfTotal.setFont(getFont());
        tfTotal.setEnabled(false);
        tfTotal.setPreferredSize(new java.awt.Dimension(100, 30));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(10, 10, 10)
                        .addComponent(cbrequestbyid, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cbrequestbyname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addGap(10, 10, 10)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(tfNo, javax.swing.GroupLayout.DEFAULT_SIZE, 174, Short.MAX_VALUE)
                            .addComponent(DateRequested, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cbdepartment, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 263, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(tfTotal, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 180, Short.MAX_VALUE)
                                    .addComponent(DateNeeded, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(cbagree)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 350, Short.MAX_VALUE)
                        .addComponent(btSave, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btDelete)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addGap(5, 5, 5)
                            .addComponent(jLabel6))
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(tfNo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel5))
                                .addComponent(DateNeeded, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(cbagree))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(DateRequested, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGap(7, 7, 7))
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                            .addComponent(jLabel1)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel3)
                                        .addComponent(cbdepartment, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGap(4, 4, 4)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(cbrequestbyname, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(cbrequestbyid, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel2))))
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                            .addGap(5, 5, 5)
                                            .addComponent(jLabel7))
                                        .addComponent(tfTotal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel4))))))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(btSave, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(61, 61, 61)))
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 245, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btSaveActionPerformed
        saveData();
    }//GEN-LAST:event_btSaveActionPerformed

    private void tbPurchaseRequestKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tbPurchaseRequestKeyPressed
        if (evt.getID() == KeyEvent.KEY_PRESSED) {
            if (evt.getKeyCode() == KeyEvent.VK_DOWN) {
                if (tbPurchaseRequest.getSelectedRow() == tbPurchaseRequest.getRowCount() - 1) {
                    addRow();
                }
            }
        }
    }//GEN-LAST:event_tbPurchaseRequestKeyPressed

    private void cbrequestbynameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbrequestbynameActionPerformed
        cbrequestbyid.setSelectedIndex(cbrequestbyname.getSelectedIndex());
    }//GEN-LAST:event_cbrequestbynameActionPerformed

    private void btDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btDeleteActionPerformed
  if (tbPurchaseRequest.getSelectedRow() >= 0) {
            PurchaseRequest purchaserequest = AppUtil.getService().getPurchaseRequestById(Integer.valueOf(tbPurchaseRequest.getValueAt(tbPurchaseRequest.getSelectedRow(), 0).toString()));
            if (purchaserequest != null) {
                purchaserequest.setDeleteDatetime(new Date());
                purchaserequest.setDeleteByUserRecordId(Main.getFrame().getLogin().getEmployeeRecordId());
                if (AppUtil.getService().save(purchaserequest)) {
                    msg("Delete Done!");
                    refreshTable();
                } else {
                    msg("Delete Failed!");
                }

            }

        }
    }//GEN-LAST:event_btDeleteActionPerformed

    private void tbPurchaseRequestKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tbPurchaseRequestKeyReleased

                    
  
    }//GEN-LAST:event_tbPurchaseRequestKeyReleased

    private void cbdepartmentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbdepartmentActionPerformed

    }//GEN-LAST:event_cbdepartmentActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.toedter.calendar.JDateChooser DateNeeded;
    private com.toedter.calendar.JDateChooser DateRequested;
    private javax.swing.JButton btDelete;
    private javax.swing.JButton btSave;
    private javax.swing.JCheckBox cbagree;
    private javax.swing.JComboBox<String> cbdepartment;
    private javax.swing.JComboBox<String> cbrequestbyid;
    private javax.swing.JComboBox<String> cbrequestbyname;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea taDescription;
    private javax.swing.JTable tbPurchaseRequest;
    private javax.swing.JTextField tfNo;
    private javax.swing.JTextField tfTotal;
    // End of variables declaration//GEN-END:variables
   private void saveData() {
       
        if (option.equals("NEW")) {
            formToObject();
            purchaserequest.setCreateDatetime(new Date());
            purchaserequest.setCreateByUserRecordId(Main.getFrame().getLogin().getEmployeeRecordId());
            if (AppUtil.getService().save(purchaserequest)) {
                for (int i = 0; i < tbPurchaseRequest.getRowCount(); i++) {
                    PurchaseRequestDetail requestdetail = new PurchaseRequestDetail();
                    requestdetail.setPurchaseRequestRecordId(purchaserequest.getRecordId());
                    System.out.println(tbPurchaseRequest.getValueAt(i, 2).toString());
                    
                    requestdetail.setDescription(tbPurchaseRequest.getValueAt(i, 1).toString());
                    requestdetail.setEstPrice(Double.parseDouble(tbPurchaseRequest.getValueAt(i, 2).toString()));
                    requestdetail.setQty(Integer.parseInt(tbPurchaseRequest.getValueAt(i, 3).toString()));
                    requestdetail.setSubtotal(Double.parseDouble(tbPurchaseRequest.getValueAt(i, 4).toString()));
                    requestdetail.setCreateDatetime(new Date());
                    requestdetail.setCreateByUserRecordId(Main.getFrame().getLogin().getEmployeeRecordId());
                    AppUtil.getService().save(requestdetail);
                }
                msg("Save Done!");
                Main.getFrame().getTab().removeTabAt(Main.getFrame().getTab().getSelectedIndex());

            } else {
                msg("Save Failed!");
            }

        }else if (option.equals("EDIT")) {
            formToObject();
            System.out.println(recordId);
            purchaserequest.setRecordId(recordId);
            if (AppUtil.getService().save(purchaserequest)) {
                for (int i = 0; i < tbPurchaseRequest.getRowCount(); i++) {
                    PurchaseRequestDetail requestdetail = new PurchaseRequestDetail();
                    if(tbPurchaseRequest.getValueAt(i, 0) != null){
                        requestdetail.setRecordId((Integer) tbPurchaseRequest.getValueAt(i, 0));
                    }
                    requestdetail.setPurchaseRequestRecordId(recordId);
                    requestdetail.setDescription(tbPurchaseRequest.getValueAt(i, 1).toString());
                    requestdetail.setEstPrice(Double.parseDouble(tbPurchaseRequest.getValueAt(i, 2).toString()));
                    requestdetail.setQty(Integer.parseInt(tbPurchaseRequest.getValueAt(i, 3).toString()));
                    requestdetail.setSubtotal(Double.parseDouble(tbPurchaseRequest.getValueAt(i, 4).toString()));
                    requestdetail.setCreateDatetime(new Date());
                    requestdetail.setCreateByUserRecordId(Main.getFrame().getLogin().getEmployeeRecordId());
                    AppUtil.getService().save(requestdetail);
                }
                msg("Save Done!");
                Main.getFrame().getTab().removeTabAt(Main.getFrame().getTab().getSelectedIndex());
            } else {
                msg("Save Failed!");
            }
        }
}
public void nullifyTableValue(){
       for (int i = 0; i < tbPurchaseRequest.getRowCount(); i++){
        tbPurchaseRequest.setValueAt(0.00, i, 2);
        tbPurchaseRequest.setValueAt(0.00, i, 4);
           
       }
   }
public void formToObject() {
        if (purchaserequest == null) {
            purchaserequest = new PurchaseRequest();
        }
        purchaserequest.setNo(tfNo.getText());
        purchaserequest.setDate(DateRequested.getDate());
        purchaserequest.setDepartment(cbdepartment.getSelectedItem().toString());
        purchaserequest.setDateNeeded(DateNeeded.getDate());
        purchaserequest.setRequestByRecordId(Integer.parseInt(cbrequestbyid.getSelectedItem().toString()));
        purchaserequest.setTotal(Double.parseDouble(tfTotal.getText()));
        purchaserequest.setAgreed(cbagree.isSelected());
    }
    
    public void objectToForm() {
        if (purchaserequest != null) {
            tfNo.setText(purchaserequest.getNo());
            DateRequested.setDate(purchaserequest.getDate());
            cbdepartment.setSelectedItem(purchaserequest.getDepartment());
            DateNeeded.setDate(purchaserequest.getDateNeeded());
            cbrequestbyname.setSelectedItem(Support.getKeyFromValue(employerID,purchaserequest.getRequestByRecordId()));
            tfTotal.setText(purchaserequest.getTotal().toString());
            cbagree.setSelected(purchaserequest.getAgreed());
            
        }
    }
    
    
    private void abstractActionPerformed(java.awt.event.ActionEvent evt) {
        TableCellListener tcl = (TableCellListener) evt.getSource();
        int row = tbPurchaseRequest.getSelectedRow();
        if (tbPurchaseRequest.getSelectedRow() >= 0) {
            switch (tcl.getColumn()) {
                case 2: {
                    int a;
                    if (tbPurchaseRequest.getModel().getValueAt(row, 3) == null) {
                        a = 0;
                    } else {
                        a = Integer.parseInt(tbPurchaseRequest.getModel().getValueAt(row, 3).toString());
                    }
                    Double b = (Double) tcl.getNewValue();
                    Double subtotal = a * b;
                    tbPurchaseRequest.setValueAt(subtotal, row, 4);
                    count();
                    break;
                }
                case 3: {
                    double a;
                    if (tbPurchaseRequest.getModel().getValueAt(row, 2) == null) {
                        a = 0.00;
                    } else {
                        a = Double.parseDouble(String.valueOf(tbPurchaseRequest.getModel().getValueAt(row, 2)));
                    }
                    int b = Integer.parseInt(tcl.getNewValue().toString());
                    double subtotal = a * b;
                    tbPurchaseRequest.setValueAt(subtotal, row, 4);
                    count();
                    break;
                }
                default:
                    break;
            }
            
        }
    }
    
    private AbstractAction saveAction() {
        AbstractAction save = new AbstractAction() {
            
            @Override
        public void actionPerformed(ActionEvent e) {
//                JOptionPane.showMessageDialog(RentData.this.tbRent, "Action Triggered.");
                tbPurchaseRequest.editingCanceled(null);
                tbPurchaseRequest.editingStopped(null);
                int selectedRow = tbPurchaseRequest.getSelectedRow();
                if (selectedRow != -1) {
                    ((DefaultTableModel) tbPurchaseRequest.getModel()).removeRow(selectedRow);
                    tbPurchaseRequest.scrollRectToVisible(tbPurchaseRequest.getCellRect(tbPurchaseRequest.getRowCount() - 1, 0, true));
                }
            }
        };
        return save;
    }
    
    private void addRow() {
        DefaultTableModel model = (DefaultTableModel) tbPurchaseRequest.getModel();
        if (model != null) {
            model.addRow(new Object[]{});
        }
        
    }
    public void cellrenderer(){
        TableColumnModel m = tbPurchaseRequest.getColumnModel();
        DoubleCellRenderer dcr = new DoubleCellRenderer();
        m.getColumn(2).setCellRenderer(dcr);
          m.getColumn(4).setCellRenderer(dcr);
    }
    public void refreshTable() {
        List<PurchaseRequestDetail> list = AppUtil.getService().getListRequestDetailById(recordId);
        DefaultTableModel dtm = (DefaultTableModel) tbPurchaseRequest.getModel();
        dtm.setRowCount(0);
        for (PurchaseRequestDetail rd : list) {
            dtm.addRow(new Object[]{rd.getRecordId(),rd.getDescription(), rd.getEstPrice(), rd.getQty(), rd.getSubtotal()});
        }
    }
   
    public void count() {
        if (tbPurchaseRequest.getRowCount() > 0) {
            Double subtotal = 0.00;
            
            for (int i = 0; i < tbPurchaseRequest.getRowCount(); i++) {
                System.out.println("Value = " + tbPurchaseRequest.getModel().getValueAt(i, 4));
                subtotal = subtotal + Double.parseDouble(tbPurchaseRequest.getModel().getValueAt(i, 4).toString());
                System.out.println("Subtotal" + subtotal);
            }
            tfTotal.setText(subtotal.toString());
        }
    }
    public void loadingData() {
        cbrequestbyid.removeAllItems();
        cbrequestbyname.removeAllItems();
        AutoCompletion.enable(cbrequestbyid);
        AutoCompletion.enable(cbrequestbyname);
        employerID = new HashMap();
       
        List<Employer> employerlist = AppUtil.getService().getEmployersNotDeleted();
        for (Employer employe : employerlist) {
            employerID.put(employe.getName(), employe.getRecordId());
            cbrequestbyid.addItem(employe.getRecordId().toString());
            cbrequestbyname.addItem(employe.getName());
        }
         if (option.equals("NEW")) {
            tfNo.setText(Support.AutoNumber(AppUtil.getService().getPurchaseRequestLast(), "PR", Boolean.TRUE));
            tfTotal.setText("0");
            taDescription.setText("");
            
            DateNeeded.setDate(new Date());
            DateRequested.setDate(new Date());
            addRow();
        } else if (option.equals("EDIT")) {
            purchaserequest = AppUtil.getService().getPurchaseRequestById(recordId);
            objectToForm();
            refreshTable();
        }
    }
    private void msg(String msg) {
        JOptionPane.showMessageDialog(null, msg);
    }
}
